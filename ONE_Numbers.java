public class ONE_Numbers {
    /*
        给定一个字节(8 bit)的无符号整型变量，求二进制数中的 1 的个数，效果尽可能高
        idea 1: 一直除以 2。
        idea 2: 移位 &1 比除操作效率高。
        idea 3: 上述时间复杂度仍为O(logv)，为数二进制位数，能否继续缩减？
                减少为只和 1 的数目有关，循环 n &= (n-1)，一次消除一个 1。
        idea 4: 更快之列表，将八位数据的所有可能情况枚举，分支操作，但情况有 256 种，不好。
        idea 5: 空间换时间，将所有 256 个数的 1 的个数存到表中，每次查表 O(1) 完活。
        extension:
        1）变量为 32 位的DWORD，采用哪种算法？或者改进哪一个算法？
            不可 4、5，采用idea 3。
        2）两个正整数二进制表示种多少位不同？
            海明距离，数字的话直接 XOR 操作。
     */
    // idea 1: 一直除以 2
    static int count_1(byte v){
        int num = 0;
        while(v != 0){
            if(v % 2 == 1)
                num++;
            v /= 2;
        }
        return num;
    }
    // idea 2: 移位 &1
    static int count_2(byte v){
        int num = 0;
        while(v != 0){
            num += v & 0x1;
            v >>= 1;
        }
        return num;
    }
    // idea 3: 循环 n &= (n-1)，一次消除一个 1
    static int count_3(byte v){
        int num = 0;
        while(v != 0){
            v &= (v-1);
            num++;
        }
        return num;
    }
    static int countTable[] = {
            0, 1, 1, 2, 1, 2, 2, 3, 1, 2, 2, 3, 2, 3, 3, 4, 1, 2, 2, 3, 2, 3, 3, 4, 2, 3,
            3, 4, 3, 4, 4, 5, 1, 2, 2, 3, 2, 3, 3, 4, 2, 3, 3, 4, 3, 4, 4, 5, 2, 3, 3, 4,
            3, 4, 4, 5, 3, 4, 4, 5, 4, 5, 5, 6, 1, 2, 2, 3, 2, 3, 3, 4, 2, 3, 3, 4, 3, 4,
            4, 5, 2, 3, 3, 4, 3, 4, 4, 5, 3, 4, 4, 5, 4, 5, 5, 6, 2, 3, 3, 4, 3, 4, 4, 5,
            3, 4, 4, 5, 4, 5, 5, 6, 3, 4, 4, 5, 4, 5, 5, 6, 4, 5, 5, 6, 5, 6, 6, 7, 1, 2,
            2, 3, 2, 3, 3, 4, 2, 3, 3, 4, 3, 4, 4, 5, 2, 3, 3, 4, 3, 4, 4, 5, 3, 4, 4, 5,
            4, 5, 5, 6, 2, 3, 3, 4, 3, 4, 4, 5, 3, 4, 4, 5, 4, 5, 5, 6, 3, 4, 4, 5, 4, 5,
            5, 6, 4, 5, 5, 6, 5, 6, 6, 7, 2, 3, 3, 4, 3, 4, 4, 5, 3, 4, 4, 5, 4, 5, 5, 6,
            3, 4, 4, 5, 4, 5, 5, 6, 4, 5, 5, 6, 5, 6, 6, 7, 3, 4, 4, 5, 4, 5, 5, 6, 4, 5,
            5, 6, 5, 6, 6, 7, 4, 5, 5, 6, 5, 6, 6, 7, 5, 6, 6, 7, 6, 7, 7, 8
    };
    // idea 5: 查表
    static int count_5(byte v){
        return countTable[v];
    }

    public static void main(String[] args){
        System.out.println(count_1((byte)10100011));
        System.out.println(count_2((byte)10100010));
        System.out.println(count_3((byte)10100011));
        System.out.println(count_5((byte)10100010));
    }
}
