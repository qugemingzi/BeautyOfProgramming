public class Tetris_Minesweeper {
    /*
        俄罗斯方块 Tetris
        数据结构实现每一个可移动的积木块，底层堆积的积木，如何有效的消除积木。
        analysis:
        木块下落过程：
            1、旋转到合适的方向
            2、水平移动到某一列
            3、垂直下落到底部
        模拟游戏区域：area[M][N]，0 => 空，1 => 有方块
        积木块：因尺寸不同，统一尺寸为 4x4 数组，如下：
            0 0 0 0   0 0 0 0   0 0 0 0   0 0 1 0   0 0 0 0
            1 1 1 0   0 1 1 0   1 1 0 0   0 0 1 0   0 1 1 0
            0 1 0 0   0 1 0 0   0 1 1 0   0 0 1 0   0 1 1 0
            0 0 0 0   0 1 0 0   0 0 0 0   0 0 1 0   0 0 0 0
        积木块一共 7 种(1*4, 2*2, +-Z, +-L, T)，定义 4 个旋转方向，即
        BlockSets[7][4] 表示 7 种方块的 4 种旋转方向。
        水平移动和竖直移动范围，记录 4x4 方块距离游戏区域左上角位移(offsetX, offsetY)
        举例
            0 0 0 0  minCol=1, maxCol=2, minRow=1, maxRow=3
            0 1 1 0  offsetX in [0-minCol, M-1-maxCol] = [-1, M-3]
            0 1 0 0
            0 1 0 0
        判断下落方法：计算 4x4 每一列触底高度的最小值，游戏区域每列可用长度 - maxRow
        此时遍历各种旋转角度在每一列下落的格局，要想向智能靠近，还需要建模判断一下哪种
        格局更好。比如采取积分制，消除行加分，产生洞减分，不能“盖”的太高
        消除 1~4 行加分 1, 3, 7, 13 分，每增加一个“洞”减 4 分，超过 5 个“洞”额外扣除 15 分
        放置行高于 M*3/5，每高一行减 2 分。
        要是还有预留下一个形状的方块，则考虑的需要更多，等长条来消除 4 行等等。
        extension;
        1）“钻洞”如何考虑？
            多次考虑下落的情况，有阻挡的也要考虑其下方。
        2）如果某一列太高，导致方块走不过去最右侧，如何调整？
            移动时判断每列触底高度
        3）增加功能？
            可以选择回退一步，可以选择消除某一个方块，给出提示较优解。

        挖雷游戏 Minesweeper
        增加一个功能，能够在游戏过程中显示所有未标识的方块种是否有地雷的概率？
        遍历每个方块的邻居，计算每个邻居的周边雷数和已经标识出来的雷数差，剩余未标识的雷均等概率
        所有邻居种概率最高的即为该方块的有雷概率。
     */
}
